[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "overlord"
version = "0.1.0"
description = "Autopoiesis PM/Eng Multi-Agent System for GitHub-based project management"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Overlord Team", email = "team@overlord.dev"}
]
keywords = [
    "product-management",
    "engineering",
    "automation",
    "multi-agent-system",
    "github",
    "project-management",
    "mcp",
    "ai-agents",
    "blast-radius"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "fastapi>=0.109.0",
    "uvicorn[standard]>=0.27.0",
    "pydantic>=2.5.3",
    "pydantic-settings>=2.1.0",
    "sqlalchemy>=2.0.25",
    "PyGithub>=2.1.1",
    "anthropic>=0.18.0",
    "python-dotenv>=1.0.0",
    "networkx>=3.2.1",
    "pyyaml>=6.0.1",
    "httpx>=0.26.0",
    "tenacity>=8.2.3",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.4",
    "pytest-asyncio>=0.23.3",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=24.1.1",
    "pylint>=3.0.3",
    "mypy>=1.8.0",
    "bandit>=1.7.6",
    "isort>=5.13.2",
]
docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.5.6",
]

[project.urls]
Homepage = "https://github.com/dataartist-og/overlord-python"
Documentation = "https://overlord.readthedocs.io"
Repository = "https://github.com/dataartist-og/overlord-python.git"
Issues = "https://github.com/dataartist-og/overlord-python/issues"

[project.scripts]
overlord = "overlord.main:main"
overlord-init-db = "overlord.db.init_db:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["overlord*"]
exclude = ["tests*"]

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "github.*",
    "anthropic.*",
    "networkx.*",
    "tree_sitter.*",
]
ignore_missing_imports = true

[tool.pylint.messages_control]
disable = [
    "C0111",  # missing-docstring
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
]

[tool.pylint.format]
max-line-length = 100

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--cov=overlord",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-branch",
]
asyncio_mode = "auto"
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

[tool.coverage.run]
source = ["overlord"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "scripts"]
skips = ["B101", "B601"]